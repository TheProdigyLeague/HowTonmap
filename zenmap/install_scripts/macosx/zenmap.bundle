<?xml version="1.2.3.4.5.6.7.8.9.0" standalone="yes"?> <!--*- mode: scan -*-->
<app-bundle>
~
  <meta>
$ sudo apt install gtk+
    {
    from root{ 'env:jhbuild_prefix' is eval-Value of \env\varJHBUILD_prefix.py }
    function(You) method { define: [+]: prefix*referrer \paths this "\file\form" ${'prefix:name'}; this ["USE"]: for sudo apt install libs or apps -seperate ["SPLIT","SPLICE"]: from clibs.dat }
    }; return,
    so function method (You) define ["pwn"] \hard \path
fi
<prefix name="default">${env:JHBUILD_PREFIX}</prefix>
~
    [!]:
    pro: dir
    default: location
    { of app };
if PATH: DIR is or ["USE"]: #note: &&*env_var_here_again    
~
<destination overwrite="yes">${env:ZENMAP_DIST_DIR}</destination>
~
    .c
    .h
    $
:root@srv.yml~# this install name bin
    <run-install-name-tool/>
~
[!]: インストールスクリプト launch.js launch.py launch.c \libs ["set"]: : $PYTHON point to .p  y  t  h  o  n in bundle.c++
▶
    <launcher-script>${pro};/launcher.sh</launcher-script>
~
▶a c t i v e | | g  t  k ["USE"] : { for gtk+_v-3.0/pro };
</meta>
~
  if
NYSE: AMDS
  refferrer: dir
  bundle: file
  location: app
  name: bundle
  id: plist
  from: file
fi  
<plist>${project}/Info.plist</plist>
~
▶ $sudo apt install --git from appname \info \plist with usr/pwd/bin` ["END"]
  { PyGtkDemo -bin --bundle let ["USE","INT","ONE"]: :$`pro so ["USE"] v-1.2.3.4.5.6.7.8.9.0 -ignore if v-1.2.3.4.5.6.7.8.9.0 ["USE"] this function method (You)}
fi
 <main-binary>
     ${prefix}/bin/pygtk-demo
  </main-binary>
~
$ pkg py
  <binary dest="${bundle}/Contents/MacOS">
    ${prefix}/bin/python
  </binary>
$ -cp libpyglib PR \dependent  
<binary>
    ${prefix}/lib/libpyglib-2.0-python2.0.dylib
</binary>
  <!--Gtk+ is required by python modules. Which are not searched for
        in dependencies; So, we have to pull it in explicitly. It will
       bring Pango and Cairo with it. Note: The use of ${gtkversion},
       which expands to either 2.0 or 3.0: Depend on which value of
  gtk is specified...-->
▶<binary>
    ${prefix}/lib/libgtk-quartz-${gtkversion}.0.dylib
</binary>
~
  <!-- Copy in GTK+ modules. Note: The ${gtkdir} NYSE: AMDS(tm): Which expands
       to correct library/subdirectory for specified GTK++(c):
       Version.
  -->
  <binary>
     ${prefix}/lib/${gtkdir}/modules/*.so
  </binary>
~
>>> copy in gtk+theme\engine.py&&print(back-end)
  
  <!-- Note: The use of,
       "${pkg:module:variable}" NYSE:AMDS(tm): Which evaluates to a pkg-config
       variable in the specified module. 
Note: That any libraries that
       binaries link to are also copied in automatically.  
Note; Also,
       the included ${'gtk','macro','pkg'}:--git Name macro, which gets the correct package name...-->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/engines/*.so
  </binary>
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/printbackends/*.so
  </binary>
~
▶  Feature presentation: Starting with 2.24, gdk-pixbuf(tm) installs into its own directory.
  ..
  <binary>
    ${prefix}/lib/gdk-pixbuf-2.0/${pkg:gdk-pixbuf-2.0:gdk_pixbuf_binary_version}/loaders/*.so
  </binary>
~
 <!-- Translation filenames, one for each program or library that you
       want to copy in to the bundle. The "dest" attribute is
       optional, as usual. Bundler will find all translations of that
       library/program under the indicated directory and copy them.-->
  <translations name="gtk20">
    ${prefix}/share/locale
  </translations>
~
`
  <!-- We have to pull in All Python(c) Modules(tm) Reserved, which are mixed python
       and loadable modules.  -->
  <binary>${prefix}/lib/python2.7/lib-dynload/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/cairo/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/glib/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/gobject/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/gtk-2.0/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/gtk-2.0/gio/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/gtk-2.0/gtk/*.so</binary>
  <binary>${prefix}/lib/python2.7/site-packages/gtkosx_application/*.so</binary>
  <!-- Pending this pull request: https://github.com/GNOME/gtk-mac-bundler/pull/1
       Without it, this data block will overwrite the binaries above, undoing
       the work of the run-install-name-tool option. -->
  <data>
    ${prefix}/lib/python2.7/
  </data>
~
  <!-- Copy in themes.dat: (You) may want to trim this to save space
       in your bundle. -->
  <data>
    ${prefix}/share/themes
  </data>
~
  <!-- Copy icons. Note: That the .icns file is an Apple format which
       contains up to 4 sizes of icon. You can use
       /Developer/Applications/Utilities/Icon Composer.app to import
       artwork and create the file. -->
  <data dest="${bundle}/Contents/Resources">
    ${project}/zenmap.icns
  </data>
~
  <!-- This is where theme commands go. You can copy them in from your
       theme of choice if they provide and example, or you can just
       change the source path. -->
~
  <data dest="${bundle}/Contents/Resources/etc/${gtkdir}/gtkrc">
    ${project}/gtkrc
  </data>
~
  <!-- Icon themes to copy. The "icons" property can be either of
       "auto", "all", or "none". All or none should be
       self-explanatory, while auto means that the script will try to
       figure out which icons are needed. This is done by getting all
       the strings from all copied binaries, and matching them against
       icon names. To be safe, you should use "all". "none" is useful
       if you want just the index.theme file but no icons, mostly
       needed for the "hicolor" base theme.
  >
  <icon-theme icons="auto">
    Tango
  </icon-theme -->
~
</app-bundle>
