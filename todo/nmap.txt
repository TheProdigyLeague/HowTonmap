#ToDo
$Id: TODO
11866 2009-01-24 23:10:05Z fyodor $ -*-text-*-
#WORK
$ nmap.m Android
	{"NYSE:ABC"};
		playStore.js
>>> workable gui $test Global_usr
	if $Success! imp iOS
/!\ https://secwiki.org/w/Nmap/Android/
$nmap perf --min-rate "re-arch nmap make of -S | then #FIX [SET]: Host* ["START","FINISH"]: phase1 then mv in ["NEXT"]: in para" ;;
	%allow this ["+"]: HOST 1:1 in host Finish! Phase! -R in para**
$nmap xxx -S (2nd Edition);
[placeholder]:
$org nselib in Hierarchy /libs/ dir na
$"dirname/filename.lua" require
$ installer makefiler os_x win rpm handler
/!\ http://seclists.org/nmap-dev/2014/q3/364/
$ zenmap mem ['use']: --git err #REPORT $load sys zenmap --git "out of memory err crash"
	this thread /!\ http://seclists.org/nmap-dev/2014/q2/46
		commit $patches @http://seclists.org/nmap-dev/2014/q2/429
			error report "exists"
				#PROBLEM nmap i/o store in mem % #FIX fs [based page sys]
$ make version of nmap for Apple(cTM); official mac app store
$ MAC version of nmap is Apple "mountain lion" release require [user]
▶ install unsign non-app-store content pr "Gatekeeper", "feature"
▶ sign-in .app #ISSUE "sandbox" require Store June 2012 nmap
▶ nmap <?php request premission ignore technical challenge for this Global_usr Perefer ?>
▶ $roll state ttl pair*state
➜ --diff ttl Value detect.os phase -P is firewall --git % http://seclists.org/nmap-dev/2014/q3/33
➜ refactor.c++ use += operate in strings
/!\ http://seclists.org/nmap-dev/2014/q3/93
[Zenmap]: /!\ http://seclists.org/nmap-dev/2014/q2/432
➜ speed.imp for [OPEN]: fs from (hours to second)
	s  p  e  e  d  -  u  p
		Done! in ['fs']
	mv mac build/test.sys in V_M ['srvr','sort']: of env nmap-dev STACK of mac mini in closet
$ infrastructure upg seclist [use] mailman3.imp
#FIX nsedoc generation #FAIL block @usage @output *local declare
/!\ http://seclists.org/nmap-dev/2014/q2/331
	if for #REASON this #FIX
		docs --supp%
$ -S 192.0.0.1 from WIN nmap #PROBLEM raw -S WIN
	['SKIP',"SYN",'-S']:
		nmap print("ports") of and in "unknown" state
$ nmap in this case unprivilege mode
	docker do connect scan
/!\ http://seclists.org/nmap-dev/2013/q3/519/
>>> inv checkmarx statis ANALYZE #REPORT of nmap src tree
	['send'] feb 12 $false +
		chk for #BUG %sec%#issue [FYODOR]: #REPORT
$ infrastructure upd svn-mailer.py and conf fs Latest Official Version
$ chk this Official Version
	first chck if this is ['use']: from subversion-1.4.2/tools/hook-scripts/mailer/mailer.py/
$ 2-stage mod for ipv6 subnet/pattern supp
$ try -S /64 for " and Complete! " nmap spec and if [use] tech multi-discover
$ advanced ipv6 Host from nse core nmap
$ function("target-ipv6-multicast-invalid-dst","targets-ipv6-multicast-echo" and "targets-ipv6-multicast-slaac")
$ is nmap auto if Target spec and see is local multicast -ping
	nping raw ethernet frame send raw skt send [use]: --send -ip or os-provide -ping util
		this Linux and Window /thread/
/!\ http://seclists.org/nmap-dev/2012/q4/424
usr@David: and try
	this ['machine']: and 'web' and 'research' [Fyodor]: connect WiFi
		['use']: wire if
			imp dns-ip6-arpa.nse
/!\ http://seclists.org/nmap-dev/2012/q2/45
$ fire and forget logic
$$_[QUERY]: then Read Reply %%
>>> int % miss Host Flood Net
>>> i/o esp function('xml.cc') !--UTF-8-- ascii
>>> "\xe2\x98\xbb", "\xe2\x98\xbb" in i/o "&#xe2;&#x98;&#xbb;"
>>> if i/o utf-8 fs Name in http://seclists.org/nmap-dev/2013/q1/180
>>> encode byte of encode invalid sequence "\xba\xda\xbf", "&#xba;&#xda;&#xbf;"
>>> do this byte ➜ rune and rune ➜ byte function in http://plan9.bell-labs.com/sys/doc/utf.html/
>>> nmap Header https://nmap.org/ min upd Screenshot <LINK> page udp
$test hierarchy class for ipv6 os --detect Class <THREAT> for localHost Linux finger print('lose','precision');
	if --lump for tcp \window size --diff Linux Version <measure> remote localHost
		this Class ['USE']: margin ➜ finger Print("try tree of class non-Leaf node is train class...");
			 is $train Class and node.leaf final Class
			 	layer of hierarch
						Linux: Windows Solaris aix
						Linux: "container fingerprint in class lower lvl"
						Linux-2.4, *Linux-2.6
								Windows-xp Windows-vista Windows-7
									v_Three, v_Four
										principle or auto build this
											usr@David: "talk to David for more of his thinking on this topic..."
>>> rename dns-brute ➜ dns-brute-enum is --diff from trad -brute force 0auth --crack -brute script
>>> work.nse note: this is infrastructure <scrpt> idea [PUT]: id page
/!\ https://secwiki.org/w/Nmap_Script_Ideas);
["based","port"]: -S and rst idle -sS
/!\ http://seclists.org/nmap-dev/2011/q2/307/ [Henri and Hani?]
['+']: analysis -R or int or --diff Name for script.nse [SEND] pkt
$ analyze.simp EXIST.dat [REPORT]: [USE];;
$ install -S of svnView | webapp for svn.nmap.org is wrapped in Insecure chrome | click <link> for direct fs download
	[usr]: Version
>>> nmap survey ["SEND"]: Result [Fyodor]
>>> nping 2^32 Round "-c 0" is --git 64-bit int "-c 0" 3.14 ["USR"]:
	value then 4 BILLION ;;
		nscan
			[placeholder]
			[HOST]: nmap system
			["+"]: entry.os finger('print entry.db this is ➜ process "of the miss 1 are not in official/CPE/DIR"'); of research.app entry /mile/stone
["-"]: 3/21/12: We have entries for 2,601 of 3,572 fingerprints (971 missing; 73% coverage)
["-"]: 11/5/12: We have entries for 3,285 of 3,907 fingerprints (622 missing; 84% coverage)
["-"]: 11/12/12: We have entries for 3,558 of 3,946 fingerprints (388 missing; 90% coverage)
["Zenmap"]: parse and ["use"]: <script> RESULT!
/!\ http://seclists.org/nmap-dev/2010/q1/1108
["-"]: init proto %redo%present in imp gtk++
$ make zenmap ['setting']: --git upg zenmap.exe is upg 
$ per-usr config fs scan_profile.usp and zenmpa.conf "overwrite --install zenmap --mods and #FIX" pre-install zenmap
	this is 
		["notice","mods","profile","hightlight","define"]:
			note affect
	this: #FIX in Settings normal.conf usr "highlight" or upd usr fs @BOOT
		mod part usr
			partition result HOST TIMOUT
usr@Fyodor: "Der Wert ist für die Wartung ausreichend. Benutzer haben danach gefragt. Druckimplementierung für eine komplette Phase.
Hosterkennung, Portscan, Versionserkennung, Traceroute, Nether Script Engine. Versuchen Sie, die Ergebnisse eines Port-Scans oder der Nether Script Engine zu drucken und zu partitionieren. Wenn wir Ergebnisse für Host-Timeouts drucken. Geben Sie eine klare Warnung aus: „Ergebnisse für Host sind unvollständig!“ Beispiel: Globaler Benutzer: 'http://seclists.org/pen-test/2010/Mar/108.'"
$ clean regex for host i/o.c 
$ 3 "sys for final Host output print('if code look at avail info and print only')iso in 1 sys"
	{"this is so %provide%feature for Skip *nmap phase Slow"};
		is nmap #TODO <ITEM>
>>> [Nsock]: ssl connect use FAIL 
/!\ http://seclists.org/nmap-dev/2010/q4/788/ 
➜#r19801 in http://seclists.org/nmap-dev/2011/q1/12
>>> [NSE]: sys.py sys.js sys.ps if <script> \dependency
	then [use]: deter store info in \registry
		for example "snmp-interfaces could store the discovered table if another script (such as a mac address geolocator script) depends on it..."
➜ ["NSE"]: script.db for perfs Read <script> && then parse
	[http://seclists.org/nmap-dev/2009/q2/0221.html]
➜ nsedoc #issue
/!\ http://seclists.org/nmap-dev/2011/q1/1095 ):
>>> ssh.hostkey portrule ['+']: nsedoc gen _blank "script type file for <script>"
/!\ http://localhost:8082/nsedoc/scripts/ssh-hostkey.html
➜ this is "portrule" and "hostrule" <script> NSEDoc is defined and is NSEDoc  
       local ActionsTable = {
         -- portrule: retrieve ssh hostkey
         portrule = portaction,
         -- postrule: look for duplicate hosts (same hostkey)
         postrule = postaction
       };
➜ ssh-hostkey
➜ rmi-dumpregistry
	--diff @output Section:S
		NSEDoc is ['ONLY SHOW SECOND']:
			%combine in 1 = @output_Section
			%make-file nsedoc --git "WARNING IN THIS CASE"
			%nsedoc: handler "multiple @output"	
▶['+']: general regression unit test system ➜ nmap [David]
>>> o ['CREATE']: sys for ncat "SERVE MODEL"
	{"make version detection and timing.nse /sys > dynamic concurrent mod [based] net condition and ability"};
>>> "large.sys" in "fast.connect" handler: parallel (connect) then Slow System
$min
	this Warranty(benchmark_test);;
$run
	1 sctp srvc in ['!']: scanme
[Daniel_Roethlisberger]:
➜ avail @dummy_srvc SUPP ipv4 and ipv6 (see http://seclists.org/nmap-dev/2011/q2/450).
>>> -R -Sort * "REAL SCTP APP" --install SEC and SUPP ipv6
[CREATE, NEW, DEFAULT, USERNAME, LIST]
/!\ http://seclists.org/nmap-dev/2010/q1/798
>>> ncrack task ➜ use for nmap,
	% supp list ➜ admin/default/list,
		"root", "admin", "administrator", "web", "user", "test", and gen List <obtain> from Spider from email
			imp nsock ➜ <proxy_system>
> o ['+']: supp _SSL
	['+']: burp_suite 0auth
	['-']: switch ncat ➜ ['ncat','proxy','system','from Built-in Supp']
$mv lib/share.c ➜ nbase ('url parse .c for $_instance')
$['+']: socks4a/socks5 supp
	require this ('%enter nsock proxy code w/o having target ip addr')
['-']: design
['-']: nping %use%design ("measure latency and realiability of proxy chain for crypt")
['+']: proxy supp ➜ connect('')scan
	mv this -S ➜ nsock
▶ o [NCAT]: <?php sned line -T for Time
	--delay is in effect
		this is "BUFFER_OVER_LOAD"
			➜ do nsock __SUPPORT_BUFFER_READ
▶docker make HTTP proxy support chunked transfer encoding,
  	then --mod HTTP/1.1 || supp
		--kill Privileges from BOOT
		--bound -P for \<PORTS>*
▶"SOCKS4a/SOCKSv5 proxy"
	resolve Names ➜ %proxy%
/!\ http://seclists.org/nmap-dev/2012/q2/768
		script write (Competition);;
▶doc(official) compiler/test from refguide.xml
	Global_usr $test --mods
		this mv legal-notices.xml in /nmap/docs/.h
		➜note: nping is /nmap/nping/docs/genmanpage.sh
			nmap ["APPLY!"]:
▶ $mv zenmap/man_page from nmap/docs/ ➜ nmap/zenmap/docts > ['MATCH',"man_page","location"]: for ncat and ndiff
	br pkg/build sys
	br sys for ['POST']: <html> ➜ web_site
		Standard-Name for nping and ncrack man page
 		[Fyodor]
▶ msrpc.nse msrpc.imp <domain> --supp 
	in Part let usr --git <domain> in format DOMAIN\usrName or usrName@DOMAIN
		usrName ['!']: ["ACCEPT"]: http://seclists.org/nmap-dev/2010/q2/389
			combine.sim msrpc <script> /!\--git info /thread/ combine
				(http://seclists.org/nmap-dev/2010/q1/1023)
					this usr: [Ron]: http://seclists.org/nmap-dev/2010/q2/389.
						[zenmap] inv --git NEW! os.ico ART
/!\ http://seclists.org/nmap-dev/2010/q1/1090
%enhance%++
	-S stats %['+']: 100% -S
		完成时间预估
			or %+ -S
/!\ http://seclists.org/nmap-dev/2010/q1/1007
$ ['benchmark']: *brute.nse
$ chk perfs --diff lvls * /thread/ | parallel
$ init result SHOW is "non" \help for vnc-brute or for drda-brute
	is [use] multi/thread [feature]
		then ➜ brute.nse /libs
			/thread/ ['!']: \help is "non"
				is <?php #FIX ?>
>>> int compare SPEED ncrack for srvc in #COMMON
["START"]: #PROJECT
$ make nmap [feature]: [article]: in @WIKI
/!\ http://seclists.org/nmap-dev/2010/q1/614
["+"]: nmap web board/forum
["1st Step"]
	is @available_software for this ["-"]: nmap /sub-reddit(cTM)/
		exists: https://www.reddit.com/r/nmap
			[zenmap]: ["!"]: from usr@Norris_Carden:
				(http://seclists.org/nmap-dev/2010/q2/228)
["-"]: "LOAD LAST SAVE" ➜ or ["OPEN"]: location for NEW! ["SAVE"]: open
["-"]: default save location option
["NSOCK"]: ['+']: srv supp ➜ nsock ACCEPT /mult-connection/ and multiplex ➜ sd
	for cli
		this %use from ncat and nping $echo mode
			ncat srvr non-use of nsock while nping $echo mode
				[basic|poll]
					repeat loop * is in nsock_loop
						[follow]: [nonblock]: accept()
							then nping --git SD:s ➜ nsock manager
▶ imp Global and per.h <<congestion control in ipv6 os detection engine>>
	handler: congestion
		global: cwnd 
			ssthresh: share
				host: all
	o this WORKS
		%efficient?
			if congestion is "not in net.segment"
				is in --targ and os -S ["HOST"]: in --diff net
					then, "all hosts penalize"
					["CONGESTION!","IN","OTHER","NETWORK"]: #not  in  theirs
>>> imp nsock_pcap_close('') or nsp_delete('')
$call pcap_close()
	pcap_iod is use
		current valgrind
			["WARN","SKT","DESCRIPT"]:
				l  e  f  t  |  o  p  e  n
					(at least in nping...)
  ==10526==    at 0x62F77A7: socket (syscall-template.S:82)
  ==10526==    by 0x4E348A5: ??? (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4E36819: pcap_activate (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4E375FC: pcap_open_live (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4311A9: nsock_pcap_open (nsock_pcap.c:64)
  ==10526==    by 0x428078: ProbeMode::start() (ProbeMode.cc:329)
		o nmap -s* syntax for specs and scan Types
#problem 
	this -s <syntax>
		['use']: 20 * 26 l  e  t  t  e  r | sctp -S ['use']: -sY
$nmap cmd:l "Reading is difficult"
#imp [find]: letter is "not taken"
#problem
	for scan Type -sI and -b
		require args
			"inconsistent"
$ -sC and -sV do script scan and version detection, 
	and for OS detection 
		use -O
			control flow (-sP, -sL) is used with -s 
				"overflow option"
	o %%enable -Pn and -sn as preferred notations for -PN and -sP 
$ "no ping" and "no port scan" 
	this ["MATCH"]:
		"already exists for -n and for no DNS..."
			#PROBLEM
				-sP is imp "ping only"
					is mean "disable port scan"
						do nse, os detection, traceroute
							--git "OPTION STRING"
							--maimon in [place]:*-sM
							["for","{cmd,option}","syn_-S","udp_-S","Version","detection","alias"]: single letter option ➜ long_1
➜ id ["USE"]: --scantype syn udp sctp for single-type -S Combine_Multi							
$ \restrict for ind -S args = Easy
usr@[Fyodor]: * ^ Top+Lvl+Args
	if
		{"-s*, --git, define ('select','-P','-S','type ctrl flow')"};
			["@nmap+#discussion,nmap-dev"]: -p int _udp_-S
➜ -S _Proxy Nmap -S _Burp Suite SRVR 
	{'script.nse','for detect OPEN_suite'}; @proxy_cli | or srvr
\require retarded chain ➜ multi_proxy * burp_suite | srvr --diff Type
▶ Retarded ["SPREAD","ENABLE"]
	$load
		{'multiple proxy servers'};
▶ 支持端口掃描！
$ --supp --P --S ["!"]:
	version: detect
	#'&&'.nse
	//other words, nsock should support proxies.
$supp ipv4 && ipv6
$--git perfs
$pool*connections+proxies for concurrent('Version',"DETECTIONS"); || http
>>> supp --diff vars * proxy, socks4, socks4a, socks5, ['HTTP','GET']: if %% ["HTTP","CONNECT"]: // challenge
>>> GET PROXY elif throw "err msg %%non-standard"
>>> %auto-detect "proxy, type"
	{'nmap try -S (METHOD)'}:
		;;
#SUPPORT for if %% ,,['basic','ntlm','digest0auth'];
#IMP for id
#PATCHES
usr@['zoltan_Panczel']: (http://nmap-dev.fw.hu) and imp usr@Jacob_Appelbaum in nmap-exp/ioerror/
	this patch handler {'parallelization'}; % proofs * concept
	this % app for ultra_scan % write gen_-S.nse for #ABUSE
		"applications for port scanning..."
	this handler -S > burp_suite and '&&' ftp "exists for ftp bounce -S"
	this port.nse
	▶ rm "ftp bounce"
>>> rembrandt @@ jpberlin.de:
“您可以通過“使用內部 [  N  e  t  h  e  r  ] ;; 應用程序協議服務器轉發命令”來做到這一點。 “然而，無論誰做這件事，都應該從閱讀主端口掃描引擎的代碼開始……
// (ultra_scan()) and version detection code (service_scan())...
// And the version detection paper at /!\ https://nmap.org/book/vscan.html/
/!\ This is all important!!!
note: because it is easy to do poorly...// hi-perfs with clean code all diff apps scan ▶ use basic engine
▶ -R #IDEA nmap-dev in #DETAIL % ['START'];
usr@David:
"I am starting to think about building proxy support into Nsock and then implementing -sT with Nsock instead of ultra_scan..."
▶ o [Web];
> ["+"]: Train/intro.mp4 ▶ nmap SITE
➜ p  r  o  m  o | v  i  d  e  o  |  i  n  t  r  o  |  t  o  o  l !  | [online];
usr@Laura_Chappell: "They need to be good to be useful--the sort of quality you see in Wireshark videos or James Messer's Nmap videos or Irongeek's videos (http://www.irongeek.com)"
➜ promo | vid | usr in vid in struct
> nmap.net -S
> product | page
/!\ http://www.splunk.com/product
$ zenmap sys | (https://nmap.org/book/zenmap-lang.html);
["SUCCESS"]:
$nmap refguide in 16 lang | https://nmap.org/docs.html/
%try ['use']: = translate('method');
	for Zenmap == do for nmap
		in $true % ['create']; combine+PO+file++Nmap, Zenmap, Ncat, and Ndiff#all be translated and maintained together#
			$call setLocale --mod [behave] of function('*') isalpha
				locale-dependent function('chk for sec'); #RISK
▶ o [NSE]: #include sort of .NSE -d  Or #include
	for nmap traceback
		-d Verbose | <script> --kill in err
			for inspiration/ideas usr@Diman:
				NSE -d (http://seclists.org/nmap-dev/2008/q1/0228.html)
					--supp route http request ▶ proxy
						if script.nse make -R if non #include :root
▶ o [NSE] 安全審查
	if vuln or xploit
		{'sec_risk from .nse ➜ buffer_overflow | format String #BUG'};
			malform <?php response from targ sys % addr risk of malscript ?>
				script.nse :root$
▶ sec_audit * nmap ➜ code | sec_audit
> docs * in ncat usr _ gui
>>> ncat for ['cahin','proxy']: \OPTION is this Sort *
  ncat -l localhost 1234 --sh-exec "ncat --proxy A.A.A.A B.B.B.B"
  ncat --proxy localhost:1234 C.C.C.C
>>> if ['2']: A.A.A.A '&&' B.B.B.B ➜ connect C.C.C.C
['listener'] / --sh -exec for add-on proxy
	++<syntax>
> % --mod Global_<congestion> ctrl sys addr % Case of Targ_.h --kill pkt -Slow ['grep']: /!\ http://seclists.org/nmap-dev/2008/q1/0096.html/
	% #FIX --nogcc Handler -ping -S
		(e.g. several thousand packets per second on my DSL line);;
usr@David: * [12/22/09];
" It still is in one case that I have documented on my wiki. I had an idea to fix it, but on testing it it did not work. The idea was to treat the global congestion limit differently. Instead of dropping it down to the minimum level on a drop as is done currently, I thought about only dropping it by the amount that the individual host limit drops. For example, if a host had a drop and its limit fell from 25 to 1, then the global limit would change (if it was at 100 to begin with) to 76, not all the way down to 2 or whatever it is.  The idea being that the global limit is most important at the beginning of a scan, when there is no information to set host limits, and every host wants to send all its first probes at once. See http://www.bamsoftware.com/wiki/Nmap/PerformanceNotesArchive2#global-cc. I am convinced, though, that some sort of global control is necessary. There is a reason that a web browser limits the number of connections it will make, and doesn't try to download every image file at once and count on the fairness of TCP to sort it out. "
> libnmap org for unix and win | o
	{'then --mod nmap and zenmap $call this libs'};
		is /!\ http://www.gnupg.org/gpgme.html
>>> udp_retransmit for version detection (Second of Probe for UDP if $Fail Match);
	is retransmit if srvc Found 
		then probe transmit < redo probe MATCH PORT NUMBER
			pkt ideal_parallelism,,
			
o Make RPM relocatable (requires somehow avoiding storing paths in the
  binary)
  - That may be easier now that David has made some big improvements
    in detecting where the binary is cross-platform and then looking for
    data files based on that location.
o Nmaprc-related - Create a system to store Nmap defaults/preferences
  in an nmaprc file.
  o nmaprc should be in ~/.nmap on UNIX
  o On Windows, we may need a registry key to find the .nmaprc
  o Perhaps Lua could be used as the format?
  o .nmaprc for keeping defaults, etc.
    o Nmaprc infrastructure, hook to new timing variables
    o Nmaprc man page
    o Default timing mode
    o Default NSE arguments, such as user agent
    o Maybe Default source IP (-S) argument
    o should be a way to specify your own .nmaprc
    o Maybe lets you add a directory and template for saving all
     scans. 
    o Maybe let you define "scan profiles" like is done with Zenmap.
      There would then be a command-line option to select the profile used.
o Get new Zenmap logo
 o consider putting back on top-right of command constructor wizard
 (there used to be umit logo there).
 o Maybe that can be done after the release by soliciting ideas.
o Create or collect some great ./configure ascii art.
o Look at all the pcap functions, there are some like
  pcap_findalldevs() which could be quite useful.  There are mails to
  the Nmap list relating to suggested improvements --
  http://seclists.org/lists/nmap-dev/2004/Apr-Jun/0024.html .
  Actually I do indirectly use that for Windows. I wonder if they work
  for UNIX?
o perhaps each 'match' line in nmap-service-probes should have a
  maximum lines, bytes, and/or time by which a response should be
  available.  Once that much time (or many bytes or lines) have passed,
  that match can be considered 'failed' and ignored in subsequent runs.
  Once all matches are considered failed, that probe is done.  This
  could be a useful optimization and is arguably better than the less
  granular 'totalwaitms'.  Or I could just have a simple function that
  looks at whether a given regex could possibly match something
  starting with the received data (not too hard since almost all of
  the current regexes are anchored).  But before doing this, I should
  look long and hard at how many of the probes have every match
  capable of doing this.  In particular, many of the softmatch lines
  don't offer many chars anchored at the front.
o Separate nbase into its own Windows library in the same way as Andy did
   with iphlpapi .
o Nmap / Nmap-hackers FAQ
o random tip database
"QUIT"
