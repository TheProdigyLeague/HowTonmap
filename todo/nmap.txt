#ToDo
$Id: TODO
11866 2009-01-24 23:10:05Z fyodor $ -*-text-*-
#WORK
$ nmap.m Android
	{"NYSE:ABC"};
		playStore.js
>>> workable gui $test Global_usr
	if $Success! imp iOS
/!\ https://secwiki.org/w/Nmap/Android/
$nmap perf --min-rate "re-arch nmap make of -S | then #FIX [SET]: Host* ["START","FINISH"]: phase1 then mv in ["NEXT"]: in para" ;;
	%allow this ["+"]: HOST 1:1 in host Finish! Phase! -R in para**
$nmap xxx -S (2nd Edition);
[placeholder]:
$org nselib in Hierarchy /libs/ dir na
$"dirname/filename.lua" require
$ installer makefiler os_x win rpm handler
/!\ http://seclists.org/nmap-dev/2014/q3/364/
$ zenmap mem ['use']: --git err #REPORT $load sys zenmap --git "out of memory err crash"
	this thread /!\ http://seclists.org/nmap-dev/2014/q2/46
		commit $patches @http://seclists.org/nmap-dev/2014/q2/429
			error report "exists"
				#PROBLEM nmap i/o store in mem % #FIX fs [based page sys]
$ make version of nmap for Apple(cTM); official mac app store
$ MAC version of nmap is Apple "mountain lion" release require [user]
▶ install unsign non-app-store content pr "Gatekeeper", "feature"
▶ sign-in .app #ISSUE "sandbox" require Store June 2012 nmap
▶ nmap <?php request premission ignore technical challenge for this Global_usr Perefer ?>
▶ $roll state ttl pair*state
➜ --diff ttl Value detect.os phase -P is firewall --git % http://seclists.org/nmap-dev/2014/q3/33
➜ refactor.c++ use += operate in strings
/!\ http://seclists.org/nmap-dev/2014/q3/93
[Zenmap]: /!\ http://seclists.org/nmap-dev/2014/q2/432
➜ speed.imp for [OPEN]: fs from (hours to second)
	s  p  e  e  d  -  u  p
		Done! in ['fs']
	mv mac build/test.sys in V_M ['srvr','sort']: of env nmap-dev STACK of mac mini in closet
$ infrastructure upg seclist [use] mailman3.imp
#FIX nsedoc generation #FAIL block @usage @output *local declare
/!\ http://seclists.org/nmap-dev/2014/q2/331
	if for #REASON this #FIX
		docs --supp%
$ -S 192.0.0.1 from WIN nmap #PROBLEM raw -S WIN
	['SKIP',"SYN",'-S']:
		nmap print("ports") of and in "unknown" state
$ nmap in this case unprivilege mode
	docker do connect scan
/!\ http://seclists.org/nmap-dev/2013/q3/519/
>>> inv checkmarx statis ANALYZE #REPORT of nmap src tree
	['send'] feb 12 $false +
		chk for #BUG %sec%#issue [FYODOR]: #REPORT
$ infrastructure upd svn-mailer.py and conf fs Latest Official Version
$ chk this Official Version
	first chck if this is ['use']: from subversion-1.4.2/tools/hook-scripts/mailer/mailer.py/
$ 2-stage mod for ipv6 subnet/pattern supp
$ try -S /64 for " and Complete! " nmap spec and if [use] tech multi-discover
$ advanced ipv6 Host from nse core nmap
$ function("target-ipv6-multicast-invalid-dst","targets-ipv6-multicast-echo" and "targets-ipv6-multicast-slaac")
$ is nmap auto if Target spec and see is local multicast -ping
	nping raw ethernet frame send raw skt send [use]: --send -ip or os-provide -ping util
		this Linux and Window /thread/
/!\ http://seclists.org/nmap-dev/2012/q4/424
usr@David: and try
	this ['machine']: and 'web' and 'research' [Fyodor]: connect WiFi
		['use']: wire if
			imp dns-ip6-arpa.nse
/!\ http://seclists.org/nmap-dev/2012/q2/45
$ fire and forget logic
$$_[QUERY]: then Read Reply %%
>>> int % miss Host Flood Net
>>> i/o esp function('xml.cc') !--UTF-8-- ascii
>>> "\xe2\x98\xbb", "\xe2\x98\xbb" in i/o "&#xe2;&#x98;&#xbb;"
>>> if i/o utf-8 fs Name in http://seclists.org/nmap-dev/2013/q1/180
>>> encode byte of encode invalid sequence "\xba\xda\xbf", "&#xba;&#xda;&#xbf;"
>>> do this byte ➜ rune and rune ➜ byte function in http://plan9.bell-labs.com/sys/doc/utf.html/
>>> nmap Header https://nmap.org/ min upd Screenshot <LINK> page udp
$test hierarchy class for ipv6 os --detect Class <THREAT> for localHost Linux finger print('lose','precision');
	if --lump for tcp \window size --diff Linux Version <measure> remote localHost
		this Class ['USE']: margin ➜ finger Print("try tree of class non-Leaf node is train class...");
			 is $train Class and node.leaf final Class
			 	layer of hierarch
						Linux: Windows Solaris aix
						Linux: "container fingerprint in class lower lvl"
						Linux-2.4, *Linux-2.6
								Windows-xp Windows-vista Windows-7
									v_Three, v_Four
										principle or auto build this
											usr@David: "talk to David for more of his thinking on this topic..."
>>> rename dns-brute ➜ dns-brute-enum is --diff from trad -brute force 0auth --crack -brute script
>>> work.nse note: this is infrastructure <scrpt> idea [PUT]: id page
/!\ https://secwiki.org/w/Nmap_Script_Ideas);
["based","port"]: -S and rst idle -sS
/!\ http://seclists.org/nmap-dev/2011/q2/307/ [Henri and Hani?]
['+']: analysis -R or int or --diff Name for script.nse [SEND] pkt
$ analyze.simp EXIST.dat [REPORT]: [USE];;
$ install -S of svnView | webapp for svn.nmap.org is wrapped in Insecure chrome | click <link> for direct fs download
	[usr]: Version
>>> nmap survey ["SEND"]: Result [Fyodor]
>>> nping 2^32 Round "-c 0" is --git 64-bit int "-c 0" 3.14 ["USR"]:
	value then 4 BILLION ;;
		nscan
			[placeholder]
			[HOST]: nmap system
			["+"]: entry.os finger('print entry.db this is ➜ process "of the miss 1 are not in official/CPE/DIR"'); of research.app entry /mile/stone
["-"]: 3/21/12: We have entries for 2,601 of 3,572 fingerprints (971 missing; 73% coverage)
["-"]: 11/5/12: We have entries for 3,285 of 3,907 fingerprints (622 missing; 84% coverage)
["-"]: 11/12/12: We have entries for 3,558 of 3,946 fingerprints (388 missing; 90% coverage)
["Zenmap"]: parse and ["use"]: <script> RESULT!
/!\ http://seclists.org/nmap-dev/2010/q1/1108
["-"]: init proto %redo%present in imp gtk++
$ make zenmap ['setting']: --git upg zenmap.exe is upg 
$ per-usr config fs scan_profile.usp and zenmpa.conf "overwrite --install zenmap --mods and #FIX" pre-install zenmap
	this is 
		["notice","mods","profile","hightlight","define"]:
			note affect
	this: #FIX in Settings normal.conf usr "highlight" or upd usr fs @BOOT
		mod part usr
			partition result HOST TIMOUT
usr@Fyodor: "Der Wert ist für die Wartung ausreichend. Benutzer haben danach gefragt. Druckimplementierung für eine komplette Phase.
Hosterkennung, Portscan, Versionserkennung, Traceroute, Nether Script Engine. Versuchen Sie, die Ergebnisse eines Port-Scans oder der Nether Script Engine zu drucken und zu partitionieren. Wenn wir Ergebnisse für Host-Timeouts drucken. Geben Sie eine klare Warnung aus: „Ergebnisse für Host sind unvollständig!“ Beispiel: Globaler Benutzer: 'http://seclists.org/pen-test/2010/Mar/108.'"
$ clean regex for host i/o.c 
$ 3 "sys for final Host output print('if code look at avail info and print only')iso in 1 sys"
	{"this is so %provide%feature for Skip *nmap phase Slow"};
		is nmap #TODO <ITEM>
>>> [Nsock]: ssl connect use FAIL 
/!\ http://seclists.org/nmap-dev/2010/q4/788/ 
➜#r19801 in http://seclists.org/nmap-dev/2011/q1/12
>>> [NSE]: sys.py sys.js sys.ps if <script> \dependency
	then [use]: deter store info in \registry
		for example "snmp-interfaces could store the discovered table if another script (such as a mac address geolocator script) depends on it..."
➜ ["NSE"]: script.db for perfs Read <script> && then parse
	[http://seclists.org/nmap-dev/2009/q2/0221.html]
➜ nsedoc #issue
/!\ http://seclists.org/nmap-dev/2011/q1/1095 ):
>>> ssh.hostkey portrule ['+']: nsedoc gen _blank "script type file for <script>"
/!\ http://localhost:8082/nsedoc/scripts/ssh-hostkey.html
➜ this is "portrule" and "hostrule" <script> NSEDoc is defined and is NSEDoc  
       local ActionsTable = {
         -- portrule: retrieve ssh hostkey
         portrule = portaction,
         -- postrule: look for duplicate hosts (same hostkey)
         postrule = postaction
       };
➜ ssh-hostkey
➜ rmi-dumpregistry
	--diff @output Section:S
		NSEDoc is ['ONLY SHOW SECOND']:
			%combine in 1 = @output_Section
			%make-file nsedoc --git "WARNING IN THIS CASE"
			%nsedoc: handler "multiple @output"	
▶['+']: general regression unit test system ➜ nmap [David]
>>> o ['CREATE']: sys for ncat "SERVE MODEL"
	{"make version detection and timing.nse /sys > dynamic concurrent mod [based] net condition and ability"};
>>> "large.sys" in "fast.connect" handler: parallel (connect) then Slow System
$min
	this Warranty(benchmark_test);;
$run
	1 sctp srvc in ['!']: scanme
[Daniel_Roethlisberger]:
➜ avail @dummy_srvc SUPP ipv4 and ipv6 (see http://seclists.org/nmap-dev/2011/q2/450).
>>> -R -Sort * "REAL SCTP APP" --install SEC and SUPP ipv6
[CREATE, NEW, DEFAULT, USERNAME, LIST]
/!\ http://seclists.org/nmap-dev/2010/q1/798
>>> ncrack task ➜ use for nmap,
	% supp list ➜ admin/default/list,
		"root", "admin", "administrator", "web", "user", "test", and gen List <obtain> from Spider from email
			imp nsock ➜ <proxy_system>
> o ['+']: supp _SSL
	['+']: burp_suite 0auth
	['-']: switch ncat ➜ ['ncat','proxy','system','from Built-in Supp']
$mv lib/share.c ➜ nbase ('url parse .c for $_instance')
$['+']: socks4a/socks5 supp
	require this ('%enter nsock proxy code w/o having target ip addr')
['-']: design
['-']: nping %use%design ("measure latency and realiability of proxy chain for crypt")
['+']: proxy supp ➜ connect('')scan
	mv this -S ➜ nsock
▶ o [NCAT]: <?php sned line -T for Time
	--delay is in effect
		this is "BUFFER_OVER_LOAD"
			➜ do nsock __SUPPORT_BUFFER_READ
▶docker make HTTP proxy support chunked transfer encoding,
  	then --mod HTTP/1.1 || supp
		--kill Privileges from BOOT
		--bound -P for \<PORTS>*
▶"SOCKS4a/SOCKSv5 proxy"
	resolve Names ➜ %proxy%
/!\ http://seclists.org/nmap-dev/2012/q2/768
		script write (Competition);;
▶doc(official) compiler/test from refguide.xml
	Global_usr $test --mods
		this mv legal-notices.xml in /nmap/docs/.h
		➜note: nping is /nmap/nping/docs/genmanpage.sh
			nmap ["APPLY!"]:
▶ $mv zenmap/man_page from nmap/docs/ ➜ nmap/zenmap/docts > ['MATCH',"man_page","location"]: for ncat and ndiff
	br pkg/build sys
	br sys for ['POST']: <html> ➜ web_site
		Standard-Name for nping and ncrack man page
 		[Fyodor]
▶ msrpc.nse msrpc.imp <domain> --supp 
	in Part let usr --git <domain> in format DOMAIN\usrName or usrName@DOMAIN
		usrName ['!']: ["ACCEPT"]: http://seclists.org/nmap-dev/2010/q2/389
			combine.sim msrpc <script> /!\--git info /thread/ combine
				(http://seclists.org/nmap-dev/2010/q1/1023)
					this usr: [Ron]: http://seclists.org/nmap-dev/2010/q2/389.
						[zenmap] inv --git NEW! os.ico ART
/!\ http://seclists.org/nmap-dev/2010/q1/1090
%enhance%++
	-S stats %['+']: 100% -S
		完成时间预估
			or %+ -S
/!\ http://seclists.org/nmap-dev/2010/q1/1007
$ ['benchmark']: *brute.nse
$ chk perfs --diff lvls * /thread/ | parallel
$ init result SHOW is "non" \help for vnc-brute or for drda-brute
	is [use] multi/thread [feature]
		then ➜ brute.nse /libs
			/thread/ ['!']: \help is "non"
				is <?php #FIX ?>
>>> int compare SPEED ncrack for srvc in #COMMON
["START"]: #PROJECT
$ make nmap [feature]: [article]: in @WIKI
/!\ http://seclists.org/nmap-dev/2010/q1/614
["+"]: nmap web board/forum
["1st Step"]
	is @available_software for this ["-"]: nmap /sub-reddit(cTM)/
		exists: https://www.reddit.com/r/nmap
			[zenmap]: ["!"]: from usr@Norris_Carden:
				(http://seclists.org/nmap-dev/2010/q2/228)
["-"]: "LOAD LAST SAVE" ➜ or ["OPEN"]: location for NEW! ["SAVE"]: open
["-"]: default save location option
["NSOCK"]: ['+']: srv supp ➜ nsock ACCEPT /mult-connection/ and multiplex ➜ sd
	for cli
		this %use from ncat and nping $echo mode
			ncat srvr non-use of nsock while nping $echo mode
				[basic|poll]
					repeat loop * is in nsock_loop
						[follow]: [nonblock]: accept()
							then nping --git SD:s ➜ nsock manager
▶ imp Global and per.h <<congestion control in ipv6 os detection engine>>
	handler: congestion
		global: cwnd 
			ssthresh: share
				host: all
	o this WORKS
		%efficient?
			if congestion is "not in net.segment"
				is in --targ and os -S ["HOST"]: in --diff net
					then, "all hosts penalize"
					["CONGESTION!","IN","OTHER","NETWORK"]: #not  in  theirs
>>> imp nsock_pcap_close('') or nsp_delete('')
$call pcap_close()
	pcap_iod is use
		current valgrind
			["WARN","SKT","DESCRIPT"]:
				l  e  f  t  |  o  p  e  n
					(at least in nping...)
  ==10526==    at 0x62F77A7: socket (syscall-template.S:82)
  ==10526==    by 0x4E348A5: ??? (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4E36819: pcap_activate (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4E375FC: pcap_open_live (in /usr/lib/libpcap.so.1.0.0)
  ==10526==    by 0x4311A9: nsock_pcap_open (nsock_pcap.c:64)
  ==10526==    by 0x428078: ProbeMode::start() (ProbeMode.cc:329)
		o nmap -s* syntax for specs and scan Types
#problem 
	this -s <syntax>
		['use']: 20 * 26 l  e  t  t  e  r | sctp -S ['use']: -sY
$nmap cmd:l "Reading is difficult"
#imp [find]: letter is "not taken"
#problem
	for scan Type -sI and -b
		require args
			"inconsistent"
$ -sC and -sV do script scan and version detection, 
	and for OS detection 
		use -O
			control flow (-sP, -sL) is used with -s 
				"overflow option"
	o %%enable -Pn and -sn as preferred notations for -PN and -sP 
$ "no ping" and "no port scan" 
	this ["MATCH"]:
		"already exists for -n and for no DNS..."
			#PROBLEM
				-sP is imp "ping only"
					is mean "disable port scan"
						do nse, os detection, traceroute

    o We might want to just give them normal option strings, so you
      could do --maimon instead of -sM, for example.  For extremely
      common options such as SYN scan, UDP scan, version detection, we
      could perhaps find good single letter options as an alias to the
      longer one.
    o Another idea is to use something like --scantype syn,udp,sctp,
      which is a lot longer for single-type scans, but shorter when
      you're combining mulitiple ones.  Doesn't allow for individual
      scan arguments easily.  I (Fyodor) think I prefer the idea above
      of just givem them top level arguments.
    o If we keep -s*, we could just give it one defined function, such
      as selecting port scan type, or control flow.
  o Obviously this will take some discussion/brainstorming on nmap-dev.
o Do -p- Internet UDP scans.
o Scanning through proxies
 o Nmap should be able to scan through proxy servers, particularly now
   that we have an NSE script for detectiong open proxies and now that
   Ncat can act as proxy client or server.
 o Requirements:
   o Would be nice to be able to chain through multiple proxy servers of
     different types.
   o Would be nice to be able to spread the load amongst multiple
     proxies.
   o Should support port scanning, version detection, and NSE.  In
     other words, nsock should support proxies.
   o Support IPv4 and v6
   o Need to figure out how to get good performance.  Pool of
     connections to proxy or proxies for concurrency?  HTTP pipelining?
   o Support the different varieties of proxies: socks4, socks4a,
     socks5, HTTP GET (if possible), HTTP CONNECT.  Note that GET
     proxies present some challenges since the error messages may not
     be standard, etc.
   o Maybe auto-detect the proxy type so that Nmap can try the most
     efficient scanning method first?
   o I've been asked to support basic, ntlm, and digest authentication
     if possible.
 o Implementation ideas: 
   o There is a patch by Zoltan Panczel (http://nmap-dev.fw.hu) and it
     has been improved by Jacob Appelbaum in nmap-exp/ioerror/ .  This
     patch doesn't handle things like parallelization, but it may be a
     good proof of concept.
   o This might not be appropriate for ultra_scan ... perhaps would be
     better to write a general scanning engine for abusing
     applications for port scanning purposes.  This could handle
     scanning through proxies and the existing FTP bounce scan would
     also be ported to this engine (or, frankly, we could probably get
     away with removing FTP bounce).  rembrandt at jpberlin.de tells me
     that you can also do this with the "forwarding" commands on IMAP
     servers.  Whoever does this should probably start by reading the
     code for the main port scanning engine (ultra_scan()) and also
     the version detection code (service_scan()).  And the version
     detection paper at https://nmap.org/book/vscan.html.  If you
     understand all that, you may be ready for this project :).  This
     is important, because it is easy to do poorly.  The tough part is
     high performance and clean code which is general enough that all
     these different applications can be scanned through using the
     same basic engine.  You should run your ideas by nmap-dev in as
     much detail as possible before starting.
   o David: I'm starting to think about building proxy support into
     Nsock and then implementing -sT with Nsock instead of ultra_scan.
o [Web] Consider adding training/introduction videos to the Nmap site
 o Would be great to have a (5 minute or less) promotional video
   introduction to each tool (Nmap, Zenmap, Ncat, Ndiff) on its web
   page.
 o They need to be good to be useful--the sort of the quality you see
   in Laura Chappell's Wireshark videos or James Messer's Nmap videos
   or Irongeek's videos (http://www.irongeek.com).
 o Besides the promotional videos, users would probably enjoy more
   in-depth video instructions (e.g. covering the Nmap Network
   Scanning topics).
 o Here's an example product page with lots of videos (we may not go
   that far): http://www.splunk.com/product
o The Zenmap translation system
  (https://nmap.org/book/zenmap-lang.html) has been pretty successful
  so far.  We should consider doing the same for Nmap.  After all, we
  already have the reference guide in 16 languages at
  https://nmap.org/docs.html.  We should definitely try to use the same
  translation methods for Zenmap as we do for Nmap.  In fact, maybe we
  can create a combined PO file Nmap, Zenmap, Ncat, and Ndiff so that
  they can all be translated and maintained together. Something to
  consider: calling setlocale can change the behavior of functions like
  isalpha. Locale-dependent functions need to be checked for security
  risks.
o [NSE] Consider whether we should include some sort of NSE debugger.  Or we
  could include something simpler.  For example, Nmap now provides a
  traceback (with sufficient debugging/verbosity) when a script ends
  in error.  For some inspiration/ideas, look at Diman's NSE
  debugger (http://seclists.org/nmap-dev/2008/q1/0228.html).
o [NSE] Support routing http requests through proxies.
o [NSE] Would be great if NSE scripts could be made to NOT
  run as root if they don't have to.
o [NSE] Security Review
 o Consider what, if any, vulnerabilities or security risks NSE has
   with respect to buffer overflows, format string bugs, any other
   maliciously formatted responses from target systems, etc.  Maybe
   address the known risk of malicious scripts too.
 o Consider that NSE runs scripts as root
o More security auditing of Nmap code (it never hurts to do more proactive
  security auditing).
o Figure out and document (in at least the Ncat user's guide) the best
  way to use Ncat for chaining through proxies.  One option is this
  sort of thing:
  ncat -l localhost 1234 --sh-exec "ncat --proxy A.A.A.A B.B.B.B"
  ncat --proxy localhost:1234 C.C.C.C
  If you had two proxies A.A.A.A and B.B.B.B, connecting to C.C.C.C.
  With another listener/--sh-exec pair for each additional proxy.
  But perhaps we can make it easier by adding it to the syntax.
o Look into whether we should loosen/change the global congestion
  control system to address possible cases of one target host with many
  dropped packets slowing down the whole group.  See
  http://seclists.org/nmap-dev/2008/q1/0096.html .
  * Related possibility: Fix --nogcc to gracefully handle ping scans.
    Right now it seems to go WAY TOO FAST (e.g. several thousand
    packets per second on my DSL line).
  * [12/22/09] David says: It still is in one case that I've
    documented on my wiki. I had an idea to fix it, but on testing it
    it didn't work. The idea was to treat the global congestion limit
    differently. Instead of dropping it down to the minimum level on a
    drop as is done currently, I thought about only dropping it by the
    amount that the individual host limit drops. For example, if a
    host had a drop and its limit fell from 25 to 1, then the global
    limit would change (if it was at 100 to begin with) to 76, not all
    the way down to 2 or whatever it is.  The idea being that the
    global limit is most important at the beginning of a scan, when
    there's no information to set host limits, and every host wants to
    send all its first probes at once. See
    http://www.bamsoftware.com/wiki/Nmap/PerformanceNotesArchive2#global-cc. I
    am convinced, though, that some sort of global control is
    necessary. There's a reason that a web browser limits the number
    of connections it will make, and doesn't try to download every
    image file at once and count on the fairness of TCP to sort it
    out.
o libnmap organization for UNIX and Windows
  o Then change Nmap and Zenmap to simply call this library
  o It is interesting to look at: http://www.gnupg.org/gpgme.html
o Deal with UDP retransmission for version detection (I think I
  should just do a second run of all probes for UDP if it fails to
  match anything).  The advantage there is that no retransmissions are
  neccessary if the service is found.  Then again, per-probe
  retransmission would let us redo the most likely probes (the one(s)
  that match the port number) quickly.  Lost packets should probably
  affect ideal_parallelism.
o Make RPM relocatable (requires somehow avoiding storing paths in the
  binary)
  - That may be easier now that David has made some big improvements
    in detecting where the binary is cross-platform and then looking for
    data files based on that location.
o Nmaprc-related - Create a system to store Nmap defaults/preferences
  in an nmaprc file.
  o nmaprc should be in ~/.nmap on UNIX
  o On Windows, we may need a registry key to find the .nmaprc
  o Perhaps Lua could be used as the format?
  o .nmaprc for keeping defaults, etc.
    o Nmaprc infrastructure, hook to new timing variables
    o Nmaprc man page
    o Default timing mode
    o Default NSE arguments, such as user agent
    o Maybe Default source IP (-S) argument
    o should be a way to specify your own .nmaprc
    o Maybe lets you add a directory and template for saving all
     scans. 
    o Maybe let you define "scan profiles" like is done with Zenmap.
      There would then be a command-line option to select the profile used.
o Get new Zenmap logo
 o consider putting back on top-right of command constructor wizard
 (there used to be umit logo there).
 o Maybe that can be done after the release by soliciting ideas.
o Create or collect some great ./configure ascii art.
o Look at all the pcap functions, there are some like
  pcap_findalldevs() which could be quite useful.  There are mails to
  the Nmap list relating to suggested improvements --
  http://seclists.org/lists/nmap-dev/2004/Apr-Jun/0024.html .
  Actually I do indirectly use that for Windows. I wonder if they work
  for UNIX?
o perhaps each 'match' line in nmap-service-probes should have a
  maximum lines, bytes, and/or time by which a response should be
  available.  Once that much time (or many bytes or lines) have passed,
  that match can be considered 'failed' and ignored in subsequent runs.
  Once all matches are considered failed, that probe is done.  This
  could be a useful optimization and is arguably better than the less
  granular 'totalwaitms'.  Or I could just have a simple function that
  looks at whether a given regex could possibly match something
  starting with the received data (not too hard since almost all of
  the current regexes are anchored).  But before doing this, I should
  look long and hard at how many of the probes have every match
  capable of doing this.  In particular, many of the softmatch lines
  don't offer many chars anchored at the front.
o Separate nbase into its own Windows library in the same way as Andy did
   with iphlpapi .
o Nmap / Nmap-hackers FAQ
o random tip database
"QUIT"
